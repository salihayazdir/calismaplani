import verifyToken from '../backend/verifyToken';
import DatePicker from 'react-datepicker';
import { useEffect, useState } from 'react';
import Head from 'next/head';
import axios from 'axios';
import { isSameISOWeek, startOfISOWeek, addDays, format } from 'date-fns';
import DashboardTable from '../components/table/DashboardTable';
import { getUserStatuses } from '../database/dbOps';

// import 'react-datepicker/dist/react-datepicker.css';

export default function Dashboard({ userStatuses }) {
  const [selectedDate, setSelectedDate] = useState(startOfISOWeek(new Date()));
  const [reportRange, setReportRange] = useState('month');
  const [records, setRecords] = useState([]);
  const [apiStatus, setApiStatus] = useState({
    isLoading: true,
    isError: false,
    message: '',
  });

  const fetchTableData = (date, reportRange) => {
    const startDate = format(date, 'yyyy-MM-dd');
    const endDate = format(addDays(date, 5), 'yyyy-MM-dd');

    setApiStatus({
      isLoading: true,
      isError: false,
      message: '',
    });

    axios
      .post(`${process.env.NEXT_PUBLIC_DOMAIN}/api/records/get-all-records`, {
        startDate: startDate,
        endDate: endDate,
      })
      .then((res) => {
        if (res.data.success === true) {
          setRecords(res.data.records);
          setApiStatus({
            isLoading: false,
            isError: false,
            message: res.data.message || '',
          });
        } else {
          setApiStatus({
            isLoading: false,
            isError: true,
            message: res.data.message || 'Bağlantı hatası.',
          });
        }
      })
      .catch((err) => {
        console.error(err);
        setApiStatus({
          isLoading: false,
          isError: true,
          message: 'Bağlantı hatası.',
        });
      });
  };

  useEffect(() => {
    fetchTableData(selectedDate);
  }, [selectedDate]);

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='flex justify-center'>
        <main className='flex  flex-col gap-6 p-10'>
          <div className='self-end'>
            <DatePicker
              selected={selectedDate}
              onChange={(date) => setSelectedDate(startOfISOWeek(date))}
              selectedDate={selectedDate}
              // endDate={endDate}
              // selectsRange
              fixedHeight
              dateFormat='dd-MM-yyyy'
              // inline
              calendarStartDay={1}
              nextMonthButtonLabel='>'
              previousMonthButtonLabel='<'
              // locale={`tr-TR`}
              dayClassName={(date) =>
                isSameISOWeek(date, selectedDate)
                  ? 'react-datepicker__day--selected'
                  : ''
              }
              popperPlacement='top-end'
              popperModifiers={[
                {
                  name: 'offset',
                  options: {
                    offset: [5, 10],
                  },
                },
                {
                  name: 'preventOverflow',
                  options: {
                    rootBoundary: 'viewport',
                    tether: false,
                    altAxis: true,
                  },
                },
              ]}
            />
          </div>
          <div className=' rounded-xl border border-gray-200 bg-white py-6 shadow-md'>
            {apiStatus.isLoading ? (
              <div>loading...</div>
            ) : (
              <DashboardTable
                records={records}
                userStatuses={userStatuses}
                selectedDate={selectedDate}
              />
            )}
          </div>
        </main>
      </div>
      ;
    </>
  );
}

export async function getServerSideProps(context) {
  if (!context.req.headers.cookie)
    return {
      redirect: {
        permanent: false,
        destination: '/giris',
      },
      props: {},
    };

  const userData = await verifyToken(context.req.headers.cookie);
  console.log(userData);

  if (!userData)
    return {
      redirect: {
        permanent: false,
        destination: '/giris',
      },
      props: {},
    };

  if (userData.is_hr === false)
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    };

  const userStatuses = await getUserStatuses();
  return {
    props: { userStatuses },
  };
}
